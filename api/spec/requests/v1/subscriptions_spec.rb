require 'swagger_helper'
# require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/v1/subscriptions', type: :request do
  fixtures :users, :players, :subscriptions

  let!(:user) do
    users(:one)
  end

  let!(:player) do
    players(:one)
  end

  let!(:subs) do
    subscriptions(:one)
  end

  before(:each) do
    expect_any_instance_of(ApplicationController).to receive(:authorized?).and_return(nil)
  end

  path '/v1/subscriptions' do
    post('Create subscriptions') do
      tags 'Subscriptions'
      consumes 'application/json'
      produces 'application/json'
      parameter name: :subscription, in: :body, schema: {
        type: :object,
        properties: {
          subscription: {
            type: :object,
            properties: {
              player_id: { type: :integer },
              user_id: { type: :integer }
            }
          }
        },
        required: [subscription: %w[player_id user_id]]
      }
      response(201, 'successful') do
        let(:subscription) { { subscription: { player_id: player.id, user_id: user.id } } }
        run_test! do |response|
          api_response = JSON.parse(response.body)
          expect(api_response).to have_key('data')
        end
      end

      # response(401, 'wrong password') do
      #   let(:subscription) { { subscription: { player_id: 'admin@email.com', user_id: '123' } } }
      #   run_test! do |response|
      #     api_response = JSON.parse(response.body)
      #     expect(api_response['message']).equal?('Invalid password')
      #   end
      # end

      # response(404, 'user not found') do
      #   let(:subscription) { { subscription: { player_id: 'email@email.com', user_id: '123' } } }
      #   run_test! do |response|
      #     api_response = JSON.parse(response.body)
      #     expect(api_response['message']).equal?('User not Found')
      #   end
      # end
    end

    get('List subscriptions') do
      tags 'Subscriptions'
      consumes 'application/json'
      produces 'application/json'

      response(200, 'successful') do
        run_test! do |response|
          api_response = JSON.parse(response.body)
          expect(api_response).to have_key('data')
        end
      end
    end
  end

  path '/v1/subscriptions/{id}' do
    put('Update subscriptions') do
      tags 'Subscriptions'
      consumes 'application/json'
      produces 'application/json'
      parameter name: :id, in: :path, type: :string
      parameter name: :subscription, in: :body, schema: {
        type: :object,
        properties: {
          subscription: {
            type: :object,
            properties: {
              player_id: { type: :integer },
              user_id: { type: :integer }
            }
          }
        },
        required: [subscription: %w[player_id user_id]]
      }
      response(200, 'successful') do
        let(:id) { subs.id }
        let(:subscription) { { subscription: { player_id: player.id, user_id: user.id } } }
        run_test!
      end
    end

    get('Show specific subscription') do
      tags 'Subscriptions'
      consumes 'application/json'
      produces 'application/json'
      parameter name: :id, in: :path, type: :string

      response(200, 'successful') do
        let(:id) { subs.id }
        run_test!
      end
    end

    delete('Delete specific subscription') do
      tags 'Subscriptions'
      consumes 'application/json'
      produces 'application/json'
      parameter name: :id, in: :path, type: :string

      response(204, 'successful') do
        let(:id) { subs.id }
        run_test!
      end
    end
  end
end
